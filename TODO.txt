-Gerer des clients multiples et ne jamais attendre/bloquer

-Ne pas utiliser le fork

-Toutes les operations doivent etre non bloquantes

-Seulement 1 poll() ou equivalent toutes les operations I/O

-Interdit d'utiliser read/recv sans utiliser poll()

-Definir un client de reference pour la correction

-Le client doit pouvoir se connecter au serveur sans rencontrer d'erreur

-Aucun crash meme si plus de memoire

-Connexions via TCP/IP (v4 ou v6)

-Fonctionnalités a implémenter :
	-authentication
	-definition de : nickname, username
	-join d'un channel
	-envoi et reception de messages depuis le client de reference
	-transfert des messages vers tous les clients connectés
	-operateurs et utilisateurs
	-commandes des operateurs


Commandes:
/nick <nickname>					--	change <nickname>
/msg <nickname> <message>			--	private <message> without window
/query <nickname> <message>			--	private <message> with window
/whois <nickname>					--	show info about <nickname>
/ignore <nickname>					--	ignore <nickname>
/away <message>						--	afk <message>
/away								--	remove afk message
/part <#channelname>				--	leave <#channelname>
/quit <[message]>					--	disconnect from irc
/invite <friendnickname> <#chan>	--	invite <nickname> to <#chan>


ORDRE :
- Creation du serveur
- Accepter et renvoyer les requetes
- Creation les objets (channel, users)
- Ajouter des nouveaux utilisateurs
- Implementer les commandes
- Implementer les codes (RFC 2812)
- Modifier les droits des utilisateurs

THOMAS :
- Implementer classes (Channel, User)

Channel :
Users		users;
(inconnu)	mode;
std::string	topic;
Users		blacklist;

Users :
(addrinfo?)	socket;
bool		protocol (ipv4/ipv6);
(inconnu)	mode (flags operateur, ban);
